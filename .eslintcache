[{"C:\\Users\\alexa\\Desktop\\WBS\\meme-factory\\src\\index.js":"1","C:\\Users\\alexa\\Desktop\\WBS\\meme-factory\\src\\App.js":"2","C:\\Users\\alexa\\Desktop\\WBS\\meme-factory\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":4419,"mtime":1611092585220,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1c90mg3",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\alexa\\Desktop\\WBS\\meme-factory\\src\\index.js",[],["16","17"],"C:\\Users\\alexa\\Desktop\\WBS\\meme-factory\\src\\App.js",["18"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport domtoimage from \"dom-to-image\";\r\n\r\nfunction App() {\r\n  const [images, setImages] = useState(\"\");\r\n  const [randomImage, setRandomImage] = useState(\"\");\r\n  const [trueState, setTrueState] = useState(true);\r\n  const [textUp, setTextUp] = useState(\"\");\r\n  const [textDown, setTextDown] = useState(\"\");\r\n  const [counterDelete, setCounterDelete] = useState(false);\r\n  const [allImages, setAllImages] = useState([]);\r\n\r\n  /*\r\n  axios\r\n  .get(\"https://api.imgflip.com/get_memes\")\r\n  .then((response) => {\r\n    setAllImages(response.data.data.memes);\r\n  })\r\n  .catch((error) => {\r\n    console.log(error)\r\n  });\r\n*/\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://api.imgflip.com/get_memes\")\r\n      .then((response) => {\r\n        setAllImages(response.data.data.memes);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  });\r\n\r\n  useEffect(() => {\r\n    // get first image\r\n    axios\r\n      .get(\"https://api.imgflip.com/get_memes\")\r\n      .then((response) => {\r\n        // set first img of api call as picture\r\n        counterDelete === false\r\n          ? setImages(response.data.data.memes[0].url)\r\n          : setImages(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  });\r\n\r\n  //get random image\r\n  const getRandomImg = () => {\r\n    let randomNumber = Math.floor(Math.random() * 99);\r\n\r\n    axios\r\n      .get(\"https://api.imgflip.com/get_memes\")\r\n      .then((response) => {\r\n        // random img on click\r\n        setRandomImage(response.data.data.memes[randomNumber].url);\r\n        setTrueState(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const deleteInput = () => {\r\n    setTextDown(\"\");\r\n    setTextUp(\"\");\r\n  };\r\n\r\n  const deleteImage = () => {\r\n    setCounterDelete(true);\r\n    setRandomImage(\"\");\r\n  };\r\n\r\n\r\n  const upload = () => {\r\n    alert('text');\r\n    const selectedFile = document.getElementById('input').files[0];\r\n    console.log(selectedFile);\r\n    setImages('');\r\n    setImages(selectedFile);\r\n  }\r\n\r\n  const downloadCurrentImage = () => {\r\n    domtoimage\r\n      .toJpeg(document.getElementById(\"image\"), {\r\n        quality: 0.8,\r\n        filter: (node) => node.tagName !== \"a\",\r\n      })\r\n      .then(function (dataUrl) {\r\n        let link = document.createElement(\"a\");\r\n        link.download = \"currentImage.jpeg\";\r\n        link.href = dataUrl;\r\n        link.click();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <h1>I can has Memes</h1>\r\n      <div className='holderTextInputs'>\r\n        <input\r\n          type='text'\r\n          placeholder='Type in above text'\r\n          onChange={(e) => setTextUp(e.target.value)}\r\n        />\r\n        <input\r\n          type='text'\r\n          placeholder='Type in downtext'\r\n          onChange={(e) => setTextDown(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='holderButtonInputs'>\r\n        <button onClick={getRandomImg}>Random Pic</button>\r\n        <input type=\"file\" id=\"input\" placeholder={'Upload pic'} multiple /><button onClick={upload}>Upload</button>\r\n        <button onClick={deleteInput}>Delete Text Input</button>\r\n        <button onClick={deleteImage}>Delete Image</button>\r\n        <button onClick={downloadCurrentImage}>Download current image</button>\r\n\r\n      </div>\r\n      <div className='holderImage'>\r\n        <div className='containerImage'>\r\n          {trueState === true ? (\r\n            <img src={images} id='image' alt='Meme Pic' />\r\n          ) : (\r\n            <img src={randomImage} id='image' alt='Meme Pic' />\r\n          )}\r\n          <div className='containerText'>\r\n            <div class='centerTop'>{textUp}</div>\r\n            <div class='centerBottom'>{textDown}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='holderGallery'>\r\n\r\n        {/*\r\n\r\n           {allImages.map((img, index) => {\r\n          return (\r\n            <div>\r\n              <img src={img.url} alt={index} />\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        */}\r\n\r\n\r\n        {/*\r\n\r\n{allImages.map(({id, name, url}) => {\r\n                return (\r\n               <div key={id}>\r\n                 <img src={url} alt={name} />\r\n\r\n                 </div>\r\n                )\r\n              })}\r\n*/}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\alexa\\Desktop\\WBS\\meme-factory\\src\\reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":13,"column":10,"nodeType":"25","messageId":"26","endLine":13,"endColumn":19},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'allImages' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]